/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.assignment.registration.model.impl;

import com.liferay.assignment.registration.model.Register;
import com.liferay.assignment.registration.model.RegisterModel;
import com.liferay.assignment.registration.model.RegisterSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Register service. Represents a row in the &quot;RGS_Register&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RegisterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegisterImpl}.
 * </p>
 *
 * @author tarun
 * @see RegisterImpl
 * @generated
 */
@JSON(strict = true)
public class RegisterModelImpl
	extends BaseModelImpl<Register> implements RegisterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a register model instance should use the <code>Register</code> interface instead.
	 */
	public static final String TABLE_NAME = "RGS_Register";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"registerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"first_name", Types.VARCHAR}, {"last_name", Types.VARCHAR},
		{"email_address", Types.VARCHAR}, {"user_name", Types.VARCHAR},
		{"birthday", Types.TIMESTAMP}, {"gender", Types.VARCHAR},
		{"password2", Types.VARCHAR}, {"home_phone", Types.BIGINT},
		{"mobile_phone", Types.BIGINT}, {"address", Types.VARCHAR},
		{"address2", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"zip", Types.VARCHAR},
		{"security_question", Types.VARCHAR},
		{"security_answer", Types.VARCHAR}, {"accepted_tou", Types.BOOLEAN},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("first_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("last_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email_address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthday", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("home_phone", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mobile_phone", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("security_question", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("security_answer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accepted_tou", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table RGS_Register (uuid_ VARCHAR(75) null,registerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,first_name VARCHAR(75) null,last_name VARCHAR(75) null,email_address VARCHAR(75) null,user_name VARCHAR(75) null,birthday DATE null,gender VARCHAR(75) null,password2 VARCHAR(75) null,home_phone LONG,mobile_phone LONG,address VARCHAR(75) null,address2 VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zip VARCHAR(75) null,security_question VARCHAR(75) null,security_answer VARCHAR(75) null,accepted_tou BOOLEAN,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table RGS_Register";

	public static final String ORDER_BY_JPQL =
		" ORDER BY register.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY RGS_Register.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Register toModel(RegisterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Register model = new RegisterImpl();

		model.setUuid(soapModel.getUuid());
		model.setRegisterId(soapModel.getRegisterId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFirst_name(soapModel.getFirst_name());
		model.setLast_name(soapModel.getLast_name());
		model.setEmail_address(soapModel.getEmail_address());
		model.setUser_name(soapModel.getUser_name());
		model.setBirthday(soapModel.getBirthday());
		model.setGender(soapModel.getGender());
		model.setPassword2(soapModel.getPassword2());
		model.setHome_phone(soapModel.getHome_phone());
		model.setMobile_phone(soapModel.getMobile_phone());
		model.setAddress(soapModel.getAddress());
		model.setAddress2(soapModel.getAddress2());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZip(soapModel.getZip());
		model.setSecurity_question(soapModel.getSecurity_question());
		model.setSecurity_answer(soapModel.getSecurity_answer());
		model.setAccepted_tou(soapModel.isAccepted_tou());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Register> toModels(RegisterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Register> models = new ArrayList<Register>(soapModels.length);

		for (RegisterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RegisterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _registerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRegisterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _registerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Register.class;
	}

	@Override
	public String getModelClassName() {
		return Register.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Register, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Register, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Register, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Register)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Register, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Register, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Register)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Register, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Register, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Register>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Register.class.getClassLoader(), Register.class,
			ModelWrapper.class);

		try {
			Constructor<Register> constructor =
				(Constructor<Register>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Register, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Register, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Register, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Register, Object>>();
		Map<String, BiConsumer<Register, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Register, ?>>();

		attributeGetterFunctions.put("uuid", Register::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Register, String>)Register::setUuid);
		attributeGetterFunctions.put("registerId", Register::getRegisterId);
		attributeSetterBiConsumers.put(
			"registerId", (BiConsumer<Register, Long>)Register::setRegisterId);
		attributeGetterFunctions.put("groupId", Register::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Register, Long>)Register::setGroupId);
		attributeGetterFunctions.put("companyId", Register::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Register, Long>)Register::setCompanyId);
		attributeGetterFunctions.put("userId", Register::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Register, Long>)Register::setUserId);
		attributeGetterFunctions.put("userName", Register::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Register, String>)Register::setUserName);
		attributeGetterFunctions.put("createDate", Register::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Register, Date>)Register::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Register::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Register, Date>)Register::setModifiedDate);
		attributeGetterFunctions.put("first_name", Register::getFirst_name);
		attributeSetterBiConsumers.put(
			"first_name",
			(BiConsumer<Register, String>)Register::setFirst_name);
		attributeGetterFunctions.put("last_name", Register::getLast_name);
		attributeSetterBiConsumers.put(
			"last_name", (BiConsumer<Register, String>)Register::setLast_name);
		attributeGetterFunctions.put(
			"email_address", Register::getEmail_address);
		attributeSetterBiConsumers.put(
			"email_address",
			(BiConsumer<Register, String>)Register::setEmail_address);
		attributeGetterFunctions.put("user_name", Register::getUser_name);
		attributeSetterBiConsumers.put(
			"user_name", (BiConsumer<Register, String>)Register::setUser_name);
		attributeGetterFunctions.put("birthday", Register::getBirthday);
		attributeSetterBiConsumers.put(
			"birthday", (BiConsumer<Register, Date>)Register::setBirthday);
		attributeGetterFunctions.put("gender", Register::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<Register, String>)Register::setGender);
		attributeGetterFunctions.put("password2", Register::getPassword2);
		attributeSetterBiConsumers.put(
			"password2", (BiConsumer<Register, String>)Register::setPassword2);
		attributeGetterFunctions.put("home_phone", Register::getHome_phone);
		attributeSetterBiConsumers.put(
			"home_phone", (BiConsumer<Register, Long>)Register::setHome_phone);
		attributeGetterFunctions.put("mobile_phone", Register::getMobile_phone);
		attributeSetterBiConsumers.put(
			"mobile_phone",
			(BiConsumer<Register, Long>)Register::setMobile_phone);
		attributeGetterFunctions.put("address", Register::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Register, String>)Register::setAddress);
		attributeGetterFunctions.put("address2", Register::getAddress2);
		attributeSetterBiConsumers.put(
			"address2", (BiConsumer<Register, String>)Register::setAddress2);
		attributeGetterFunctions.put("city", Register::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Register, String>)Register::setCity);
		attributeGetterFunctions.put("state", Register::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Register, String>)Register::setState);
		attributeGetterFunctions.put("zip", Register::getZip);
		attributeSetterBiConsumers.put(
			"zip", (BiConsumer<Register, String>)Register::setZip);
		attributeGetterFunctions.put(
			"security_question", Register::getSecurity_question);
		attributeSetterBiConsumers.put(
			"security_question",
			(BiConsumer<Register, String>)Register::setSecurity_question);
		attributeGetterFunctions.put(
			"security_answer", Register::getSecurity_answer);
		attributeSetterBiConsumers.put(
			"security_answer",
			(BiConsumer<Register, String>)Register::setSecurity_answer);
		attributeGetterFunctions.put("accepted_tou", Register::getAccepted_tou);
		attributeSetterBiConsumers.put(
			"accepted_tou",
			(BiConsumer<Register, Boolean>)Register::setAccepted_tou);
		attributeGetterFunctions.put("status", Register::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Register, Integer>)Register::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Register::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Register, Long>)Register::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Register::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Register, String>)Register::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Register::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Register, Date>)Register::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRegisterId() {
		return _registerId;
	}

	@Override
	public void setRegisterId(long registerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registerId = registerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirst_name() {
		if (_first_name == null) {
			return "";
		}
		else {
			return _first_name;
		}
	}

	@Override
	public void setFirst_name(String first_name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_first_name = first_name;
	}

	@JSON
	@Override
	public String getLast_name() {
		if (_last_name == null) {
			return "";
		}
		else {
			return _last_name;
		}
	}

	@Override
	public void setLast_name(String last_name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_last_name = last_name;
	}

	@JSON
	@Override
	public String getEmail_address() {
		if (_email_address == null) {
			return "";
		}
		else {
			return _email_address;
		}
	}

	@Override
	public void setEmail_address(String email_address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email_address = email_address;
	}

	@JSON
	@Override
	public String getUser_name() {
		if (_user_name == null) {
			return "";
		}
		else {
			return _user_name;
		}
	}

	@Override
	public void setUser_name(String user_name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_user_name = user_name;
	}

	@JSON
	@Override
	public Date getBirthday() {
		return _birthday;
	}

	@Override
	public void setBirthday(Date birthday) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_birthday = birthday;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getPassword2() {
		if (_password2 == null) {
			return "";
		}
		else {
			return _password2;
		}
	}

	@Override
	public void setPassword2(String password2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password2 = password2;
	}

	@JSON
	@Override
	public Long getHome_phone() {
		return _home_phone;
	}

	@Override
	public void setHome_phone(Long home_phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_home_phone = home_phone;
	}

	@JSON
	@Override
	public Long getMobile_phone() {
		return _mobile_phone;
	}

	@Override
	public void setMobile_phone(Long mobile_phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobile_phone = mobile_phone;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address2 = address2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getZip() {
		if (_zip == null) {
			return "";
		}
		else {
			return _zip;
		}
	}

	@Override
	public void setZip(String zip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zip = zip;
	}

	@JSON
	@Override
	public String getSecurity_question() {
		if (_security_question == null) {
			return "";
		}
		else {
			return _security_question;
		}
	}

	@Override
	public void setSecurity_question(String security_question) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_security_question = security_question;
	}

	@JSON
	@Override
	public String getSecurity_answer() {
		if (_security_answer == null) {
			return "";
		}
		else {
			return _security_answer;
		}
	}

	@Override
	public void setSecurity_answer(String security_answer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_security_answer = security_answer;
	}

	@JSON
	@Override
	public boolean getAccepted_tou() {
		return _accepted_tou;
	}

	@JSON
	@Override
	public boolean isAccepted_tou() {
		return _accepted_tou;
	}

	@Override
	public void setAccepted_tou(boolean accepted_tou) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accepted_tou = accepted_tou;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Register.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Register.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Register toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Register>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegisterImpl registerImpl = new RegisterImpl();

		registerImpl.setUuid(getUuid());
		registerImpl.setRegisterId(getRegisterId());
		registerImpl.setGroupId(getGroupId());
		registerImpl.setCompanyId(getCompanyId());
		registerImpl.setUserId(getUserId());
		registerImpl.setUserName(getUserName());
		registerImpl.setCreateDate(getCreateDate());
		registerImpl.setModifiedDate(getModifiedDate());
		registerImpl.setFirst_name(getFirst_name());
		registerImpl.setLast_name(getLast_name());
		registerImpl.setEmail_address(getEmail_address());
		registerImpl.setUser_name(getUser_name());
		registerImpl.setBirthday(getBirthday());
		registerImpl.setGender(getGender());
		registerImpl.setPassword2(getPassword2());
		registerImpl.setHome_phone(getHome_phone());
		registerImpl.setMobile_phone(getMobile_phone());
		registerImpl.setAddress(getAddress());
		registerImpl.setAddress2(getAddress2());
		registerImpl.setCity(getCity());
		registerImpl.setState(getState());
		registerImpl.setZip(getZip());
		registerImpl.setSecurity_question(getSecurity_question());
		registerImpl.setSecurity_answer(getSecurity_answer());
		registerImpl.setAccepted_tou(isAccepted_tou());
		registerImpl.setStatus(getStatus());
		registerImpl.setStatusByUserId(getStatusByUserId());
		registerImpl.setStatusByUserName(getStatusByUserName());
		registerImpl.setStatusDate(getStatusDate());

		registerImpl.resetOriginalValues();

		return registerImpl;
	}

	@Override
	public int compareTo(Register register) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), register.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Register)) {
			return false;
		}

		Register register = (Register)object;

		long primaryKey = register.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Register> toCacheModel() {
		RegisterCacheModel registerCacheModel = new RegisterCacheModel();

		registerCacheModel.uuid = getUuid();

		String uuid = registerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			registerCacheModel.uuid = null;
		}

		registerCacheModel.registerId = getRegisterId();

		registerCacheModel.groupId = getGroupId();

		registerCacheModel.companyId = getCompanyId();

		registerCacheModel.userId = getUserId();

		registerCacheModel.userName = getUserName();

		String userName = registerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			registerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			registerCacheModel.createDate = createDate.getTime();
		}
		else {
			registerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			registerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			registerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		registerCacheModel.first_name = getFirst_name();

		String first_name = registerCacheModel.first_name;

		if ((first_name != null) && (first_name.length() == 0)) {
			registerCacheModel.first_name = null;
		}

		registerCacheModel.last_name = getLast_name();

		String last_name = registerCacheModel.last_name;

		if ((last_name != null) && (last_name.length() == 0)) {
			registerCacheModel.last_name = null;
		}

		registerCacheModel.email_address = getEmail_address();

		String email_address = registerCacheModel.email_address;

		if ((email_address != null) && (email_address.length() == 0)) {
			registerCacheModel.email_address = null;
		}

		registerCacheModel.user_name = getUser_name();

		String user_name = registerCacheModel.user_name;

		if ((user_name != null) && (user_name.length() == 0)) {
			registerCacheModel.user_name = null;
		}

		Date birthday = getBirthday();

		if (birthday != null) {
			registerCacheModel.birthday = birthday.getTime();
		}
		else {
			registerCacheModel.birthday = Long.MIN_VALUE;
		}

		registerCacheModel.gender = getGender();

		String gender = registerCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			registerCacheModel.gender = null;
		}

		registerCacheModel.password2 = getPassword2();

		String password2 = registerCacheModel.password2;

		if ((password2 != null) && (password2.length() == 0)) {
			registerCacheModel.password2 = null;
		}

		Long home_phone = getHome_phone();

		if (home_phone != null) {
			registerCacheModel.home_phone = home_phone;
		}

		Long mobile_phone = getMobile_phone();

		if (mobile_phone != null) {
			registerCacheModel.mobile_phone = mobile_phone;
		}

		registerCacheModel.address = getAddress();

		String address = registerCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			registerCacheModel.address = null;
		}

		registerCacheModel.address2 = getAddress2();

		String address2 = registerCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			registerCacheModel.address2 = null;
		}

		registerCacheModel.city = getCity();

		String city = registerCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			registerCacheModel.city = null;
		}

		registerCacheModel.state = getState();

		String state = registerCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			registerCacheModel.state = null;
		}

		registerCacheModel.zip = getZip();

		String zip = registerCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			registerCacheModel.zip = null;
		}

		registerCacheModel.security_question = getSecurity_question();

		String security_question = registerCacheModel.security_question;

		if ((security_question != null) && (security_question.length() == 0)) {
			registerCacheModel.security_question = null;
		}

		registerCacheModel.security_answer = getSecurity_answer();

		String security_answer = registerCacheModel.security_answer;

		if ((security_answer != null) && (security_answer.length() == 0)) {
			registerCacheModel.security_answer = null;
		}

		registerCacheModel.accepted_tou = isAccepted_tou();

		registerCacheModel.status = getStatus();

		registerCacheModel.statusByUserId = getStatusByUserId();

		registerCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = registerCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			registerCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			registerCacheModel.statusDate = statusDate.getTime();
		}
		else {
			registerCacheModel.statusDate = Long.MIN_VALUE;
		}

		return registerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Register, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Register, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Register, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Register)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Register, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Register, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Register, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Register)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Register>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _registerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _first_name;
	private String _last_name;
	private String _email_address;
	private String _user_name;
	private Date _birthday;
	private String _gender;
	private String _password2;
	private Long _home_phone;
	private Long _mobile_phone;
	private String _address;
	private String _address2;
	private String _city;
	private String _state;
	private String _zip;
	private String _security_question;
	private String _security_answer;
	private boolean _accepted_tou;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Register, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Register)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("registerId", _registerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("first_name", _first_name);
		_columnOriginalValues.put("last_name", _last_name);
		_columnOriginalValues.put("email_address", _email_address);
		_columnOriginalValues.put("user_name", _user_name);
		_columnOriginalValues.put("birthday", _birthday);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("password2", _password2);
		_columnOriginalValues.put("home_phone", _home_phone);
		_columnOriginalValues.put("mobile_phone", _mobile_phone);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("address2", _address2);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("zip", _zip);
		_columnOriginalValues.put("security_question", _security_question);
		_columnOriginalValues.put("security_answer", _security_answer);
		_columnOriginalValues.put("accepted_tou", _accepted_tou);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("registerId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("first_name", 256L);

		columnBitmasks.put("last_name", 512L);

		columnBitmasks.put("email_address", 1024L);

		columnBitmasks.put("user_name", 2048L);

		columnBitmasks.put("birthday", 4096L);

		columnBitmasks.put("gender", 8192L);

		columnBitmasks.put("password2", 16384L);

		columnBitmasks.put("home_phone", 32768L);

		columnBitmasks.put("mobile_phone", 65536L);

		columnBitmasks.put("address", 131072L);

		columnBitmasks.put("address2", 262144L);

		columnBitmasks.put("city", 524288L);

		columnBitmasks.put("state_", 1048576L);

		columnBitmasks.put("zip", 2097152L);

		columnBitmasks.put("security_question", 4194304L);

		columnBitmasks.put("security_answer", 8388608L);

		columnBitmasks.put("accepted_tou", 16777216L);

		columnBitmasks.put("status", 33554432L);

		columnBitmasks.put("statusByUserId", 67108864L);

		columnBitmasks.put("statusByUserName", 134217728L);

		columnBitmasks.put("statusDate", 268435456L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Register _escapedModel;

}